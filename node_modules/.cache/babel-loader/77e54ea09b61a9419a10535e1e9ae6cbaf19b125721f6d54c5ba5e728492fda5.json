{"ast":null,"code":"var _jsxFileName = \"/Users/yigitdemirel/snake/src/components/SnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport '../components/SnakeGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatGPTApp = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const API_KEY = \"YOUR_OPENAI_API_KEY\"; // OpenAI API anahtarını buraya ekle\n\n  const handleSend = async () => {\n    if (userInput.trim() === \"\") return;\n    const userMessage = {\n      sender: \"user\",\n      text: userInput\n    };\n    setMessages([...messages, userMessage]);\n    setUserInput(\"\");\n    setLoading(true);\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: \"gpt-3.5-turbo\",\n        // OpenAI model ismi\n        messages: [{\n          role: \"system\",\n          content: \"You are a helpful assistant.\"\n        }, ...messages.map(msg => ({\n          role: msg.sender === \"user\" ? \"user\" : \"assistant\",\n          content: msg.text\n        })), {\n          role: \"user\",\n          content: userInput\n        }]\n      }, {\n        headers: {\n          'Authorization': `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const botMessage = {\n        sender: \"bot\",\n        text: response.data.choices[0].message.content\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error(\"API isteği sırasında bir hata oluştu:\", error);\n      const errorMessage = {\n        sender: \"bot\",\n        text: \"Sorry, something went wrong. Please try again later.\"\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: \"Thinking...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        placeholder: \"Type your message...\",\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        disabled: loading,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGPTApp, \"7ROD0Hbo1qZ/iaKM5n/KgVGmsbY=\");\n_c = ChatGPTApp;\nexport default ChatGPTApp;\nvar _c;\n$RefreshReg$(_c, \"ChatGPTApp\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ChatGPTApp","_s","messages","setMessages","userInput","setUserInput","loading","setLoading","API_KEY","handleSend","trim","userMessage","sender","text","response","post","model","role","content","map","msg","headers","botMessage","data","choices","message","prevMessages","error","console","errorMessage","className","children","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/yigitdemirel/snake/src/components/SnakeGame.js"],"sourcesContent":["\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport '../components/SnakeGame.css'\n\nconst ChatGPTApp = () => {\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const API_KEY = \"YOUR_OPENAI_API_KEY\"; // OpenAI API anahtarını buraya ekle\n\n  const handleSend = async () => {\n    if (userInput.trim() === \"\") return;\n\n    const userMessage = { sender: \"user\", text: userInput };\n    setMessages([...messages, userMessage]);\n    setUserInput(\"\");\n\n    setLoading(true);\n    \n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: \"gpt-3.5-turbo\", // OpenAI model ismi\n          messages: [\n            { role: \"system\", content: \"You are a helpful assistant.\" },\n            ...messages.map((msg) => ({ role: msg.sender === \"user\" ? \"user\" : \"assistant\", content: msg.text })),\n            { role: \"user\", content: userInput },\n          ],\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const botMessage = { sender: \"bot\", text: response.data.choices[0].message.content };\n      setMessages((prevMessages) => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error(\"API isteği sırasında bir hata oluştu:\", error);\n      const errorMessage = { sender: \"bot\", text: \"Sorry, something went wrong. Please try again later.\" };\n      setMessages((prevMessages) => [...prevMessages, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-box\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.sender}`}>\n            {msg.text}\n          </div>\n        ))}\n        {loading && <div className=\"message bot\">Thinking...</div>}\n      </div>\n      <div className=\"input-box\">\n        <input \n          type=\"text\" \n          value={userInput}\n          onChange={(e) => setUserInput(e.target.value)}\n          placeholder=\"Type your message...\" \n          disabled={loading}\n        />\n        <button onClick={handleSend} disabled={loading}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatGPTApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}